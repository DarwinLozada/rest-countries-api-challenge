{"version":3,"sources":["components/Countries.jsx","components/filters/RegionFilter.jsx","components/filters/InputFilter.jsx","components/filters/Filters.jsx","components/CountriesContainer.jsx"],"names":["sliceArrayBySteps","arr","step","index","sliceArr","length","push","slice","CardsChunk","lazy","Countries","countries","useState","slicedCountries","setSlicedCountries","countryChunksToRender","setCountryChunksToRender","useEffect","className","countriesToRender","map","countryChunk","onClick","width","RegionFilter","isToggled","toggleButton","useContext","CountriesContext","filterRegion","setFilterRegion","allCountries","countriesFilteredByRegion","filteredCountries","filter","country","region","current","onBlur","onMouseDown","e","preventDefault","InputFilter","inputQuery","setInputQuery","countriesFilteredByInput","inputRef","useRef","name","toLowerCase","includes","htmlFor","ref","type","id","placeholder","onChange","target","value","onFocus","classList","add","remove","Filters","setCountriesToRender","createContext","CountriesContainer","Provider","LoadingSpinner","size"],"mappings":"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","file":"static/js/4.3cf467b5.chunk.js","sourcesContent":["import React, { useState, useEffect, lazy } from \"react\";\r\nimport { PlusIcon } from \"./iconsComponents/IconComponents\";\r\n\r\nconst chunkLength = 10;\r\n\r\nconst sliceArrayBySteps = (arr, step) => {\r\n  let index = 0;\r\n  let sliceArr = [];\r\n  while (index < arr.length) {\r\n    sliceArr.push(arr.slice(index, (index += step)));\r\n    index++;\r\n  }\r\n  return sliceArr;\r\n};\r\n\r\nconst CardsChunk = lazy(() => import(\"./CardsChunk\"));\r\n\r\nconst Countries = ({ countries }) => {\r\n  const [slicedCountries, setSlicedCountries] = useState(\r\n    sliceArrayBySteps(countries, chunkLength)\r\n  );\r\n\r\n  const [countryChunksToRender, setCountryChunksToRender] = useState(1);\r\n\r\n  useEffect(() => {\r\n    setSlicedCountries(sliceArrayBySteps(countries, chunkLength));\r\n    setCountryChunksToRender(1);\r\n  }, [countries]);\r\n\r\n  if (countries.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center mt-40\">\r\n        <h3 className=\"text-lg\">There are no results for your query</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const countriesToRender = slicedCountries.slice(0, countryChunksToRender);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-16\">\r\n        {countriesToRender.map((countryChunk) => {\r\n          return <CardsChunk key={countryChunk[0]} countries={countryChunk} />;\r\n        })}\r\n      </div>\r\n      <div className=\"flex items-center justify-center my-16\">\r\n        {slicedCountries[1] && (\r\n          <button\r\n            className=\"flex flex-row items-center transition duration-200 focus:outline-none focus:ring-2 py-5 px-3 shadow-lg rounded font-semibold hover:bg-gray-200 dark:bg-darkBlue dark:hover:bg-gray-600\"\r\n            onClick={() => setCountryChunksToRender(countryChunksToRender + 1)}\r\n          >\r\n            <p>show more results</p>\r\n            <div className=\"ml-4 transition duration-200 rounded-2xl hover:bg-blue-200\">\r\n              <PlusIcon width=\"1.5rem\" />\r\n            </div>\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ArrowIcon } from \"../iconsComponents/IconComponents\";\r\nimport { CountriesContext } from \"../CountriesContainer\";\r\n\r\nconst RegionFilter = () => {\r\n  const [isToggled, toggleButton] = useState(false);\r\n\r\n  const [\r\n    filterRegion,\r\n    setFilterRegion,\r\n    ,\r\n    ,\r\n    allCountries,\r\n    ,\r\n    ,\r\n    ,\r\n    countriesFilteredByRegion,\r\n  ] = useContext(CountriesContext);\r\n\r\n  const returnFilteredCountriesByRegion = () => {\r\n    const filteredCountry = allCountries.filter(\r\n      (country) => country.region === filterRegion\r\n    );\r\n    return filteredCountry;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allCountries) {\r\n      const filteredCountries = returnFilteredCountriesByRegion();\r\n      countriesFilteredByRegion.current = filteredCountries;\r\n    }\r\n  }, [filterRegion]);\r\n\r\n  const regions = [\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\", \"All\"];\r\n  return (\r\n    <>\r\n      <div className=\"flex flex-col min-w-min rounded w-1/6\">\r\n        <button\r\n          className=\"flex transition duration-300 items-center justify-between shadow-md bg-white p-3 rounded text-sm dark:bg-darkBlue px-6 focus:outline-none focus:ring-2 h-full\"\r\n          onBlur={() => toggleButton(false)}\r\n          onClick={() => toggleButton(!isToggled)}\r\n        >\r\n          <p className=\"font-semibold text-gray-500 dark:text-gray-200\">\r\n            {\" \"}\r\n            {filterRegion ? filterRegion : \"Filter by Region\"}\r\n          </p>\r\n\r\n          <div\r\n            className={`transform transition-transform duration-300 ml-8 ${\r\n              isToggled && \"rotate-180\"\r\n            }`}\r\n          >\r\n            {/* {isToggled ? <UpArrow width=\"1rem\" /> : <DownArrow width=\"1rem\" />} */}\r\n            <ArrowIcon width=\"1rem\" />\r\n          </div>\r\n        </button>\r\n        <div className=\"relative\">\r\n          {isToggled && (\r\n            <div className=\"flex flex-col absolute bg-white dark:bg-darkBlue p-4 rounded shadow-md top-2 z-10 w-full gap-1\">\r\n              {regions.map((region) => {\r\n                return (\r\n                  <button\r\n                    className=\"flex transition duration-100 hover:text-blue-300\"\r\n                    onMouseDown={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                    onClick={(e) => {\r\n                      setFilterRegion(region);\r\n                      toggleButton(false);\r\n                    }}\r\n                    key={region}\r\n                  >\r\n                    {region}\r\n                  </button>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default RegionFilter;\r\n","import React, { useContext, useRef, useEffect } from \"react\";\r\nimport { CountriesContext } from \"../CountriesContainer\";\r\nimport { SearchIcon } from \"../iconsComponents/IconComponents\";\r\n\r\nconst InputFilter = () => {\r\n  const [\r\n    ,\r\n    ,\r\n    inputQuery,\r\n    setInputQuery,\r\n    allCountries,\r\n    ,\r\n    ,\r\n    countriesFilteredByInput,\r\n  ] = useContext(CountriesContext);\r\n\r\n  let inputRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    e.preventDefault();\r\n    setInputQuery(e.target.value);\r\n  };\r\n\r\n  const returnFilteredCountriesByinput = () => {\r\n    const filteredContacts = allCountries.filter((country) =>\r\n      country.name.toLowerCase().includes(inputQuery.toLowerCase())\r\n    );\r\n    return filteredContacts;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allCountries) {\r\n      const filteredCountries = returnFilteredCountriesByinput();\r\n      countriesFilteredByInput.current = filteredCountries;\r\n    }\r\n  }, [inputQuery]);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <label htmlFor=\"country\" className=\"absolute opacity-0\">\r\n        Search for a country\r\n      </label>\r\n      <div\r\n        className=\"flex flex-row items-center min-w-min md:w-96 bg-white dark:darkBlue shadow-md rounded overflow-hidden truncate dark:bg-darkBlue transition duration-300\"\r\n        ref={inputRef}\r\n      >\r\n        <div className=\"ml-4 sm:ml-8 mr-4 sm:mx-8 dark:text-white\">\r\n          <SearchIcon width=\"1.4rem\" />\r\n        </div>\r\n        <input\r\n          className=\"transition duration-300 py-4 focus:outline-none dark:bg-darkBlue placeholder-grey dark:placeholder-white mr-4 w-full\"\r\n          type=\"text\"\r\n          id=\"country\"\r\n          placeholder=\"Search for a country...\"\r\n          onChange={handleInputChange}\r\n          onFocus={() => inputRef.current.classList.add(\"ring-2\")}\r\n          onBlur={() => inputRef.current.classList.remove(\"ring-2\")}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputFilter;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport RegionFilter from \"./RegionFilter\";\r\nimport InputFilter from \"./InputFilter\";\r\nimport { CountriesContext } from \"../CountriesContainer\";\r\n\r\nconst Filters = () => {\r\n  const [\r\n    filterRegion,\r\n    ,\r\n    inputQuery,\r\n    ,\r\n    ,\r\n    ,\r\n    setCountriesToRender,\r\n    countriesFilteredByInput,\r\n    ,\r\n  ] = useContext(CountriesContext);\r\n\r\n  useEffect(() => {\r\n    if (filterRegion !== \"All\") {\r\n      const filteredCountries = countriesFilteredByInput.current.filter(\r\n        (country) => country.region === filterRegion\r\n      );\r\n      setCountriesToRender(filteredCountries);\r\n      return;\r\n    }\r\n    setCountriesToRender(countriesFilteredByInput.current);\r\n  }, [inputQuery, filterRegion]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col sm:flex-row justify-between w-full gap-8\">\r\n      <InputFilter />\r\n      <RegionFilter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import React, { useRef, useState, createContext } from \"react\";\r\nimport LoadingSpinner from \"./feedbackComponents/LoadingSpinner\";\r\nimport Countries from \"./Countries\";\r\nimport Filters from \"./filters/Filters\";\r\n\r\nexport const CountriesContext = createContext();\r\n\r\nconst CountriesContainer = ({ allCountries }) => {\r\n  const countriesFilteredByInput = useRef(null);\r\n  const countriesFilteredByRegion = useRef(null);\r\n  const [inputQuery, setInputQuery] = useState(\"\");\r\n  const [filterRegion, setFilterRegion] = useState(\"All\");\r\n  const [countriesToRender, setCountriesToRender] = useState(null);\r\n\r\n  if (allCountries && !countriesToRender) {\r\n    countriesFilteredByInput.current = allCountries;\r\n    setCountriesToRender(allCountries);\r\n  }\r\n\r\n  return (\r\n    <CountriesContext.Provider\r\n      value={[\r\n        filterRegion,\r\n        setFilterRegion,\r\n        inputQuery,\r\n        setInputQuery,\r\n        allCountries,\r\n        countriesToRender,\r\n        setCountriesToRender,\r\n        countriesFilteredByInput,\r\n        countriesFilteredByRegion,\r\n      ]}\r\n    >\r\n      <div className=\"flex flex-col bg-veryLightGrey dark:bg-veryDarkBlueBg min-h-screen px-12 transition duration-500\">\r\n        <div className=\"flex flex-col sm:flex-row justify-between my-12\">\r\n          <Filters />\r\n        </div>\r\n        <div>\r\n          {!allCountries ? (\r\n            <LoadingSpinner size=\"h-48 w-48\" />\r\n          ) : (\r\n            <Countries countries={countriesToRender} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </CountriesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CountriesContainer;\r\n"],"sourceRoot":""}